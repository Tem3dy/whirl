#shader vertex
#version 450 core

layout(location = 0) in vec2  a_position;
layout(location = 1) in vec2  a_size;
layout(location = 2) in vec2  a_local;
layout(location = 3) in float a_radius;
layout(location = 4) in uint  a_color;

uniform mat4 u_projection;

out vec2  p_size;
out vec2  p_local;
out float p_radius;
out vec4  p_color;

void main()
{
    gl_Position = u_projection * vec4(a_position, 0.0, 1.0);
    p_size = a_size;
    p_local = a_local;
    p_radius = a_radius;
    p_color = vec4(
        float((a_color >> 24) & 0xFF) / 255.0,
        float((a_color >> 16) & 0xFF) / 255.0,
        float((a_color >>  8) & 0xFF) / 255.0,
        float((a_color >>  0) & 0xFF) / 255.0
    );
}

#shader fragment
#version 450 core

in vec2  p_size;   // dimensions
in vec2  p_local;  // local coords
in float p_radius; // radius in pixels
in vec4  p_color;  // color

out vec4 color;

vec4 calc_bounds(vec2 arc_center)
{
    float dist = length(arc_center - p_local) - p_radius;
    float factor = 1.0f;
    return p_color * smoothstep(-factor, factor, -dist);
}

void main()
{
    if (p_local.x < p_radius)
    {
        if (p_local.y < p_radius)
        {
            vec2 arc_center = vec2(p_radius);
            color = calc_bounds(arc_center);
        }
        else if (p_local.y > p_size.y - p_radius)
        {
            vec2 arc_center = vec2(p_radius, p_size.y - p_radius);
            color = calc_bounds(arc_center);
        }
        else
        {
            color = p_color;
        }
    }
    else if (p_local.x > p_size.x - p_radius)
    {
        if (p_local.y < p_radius)
        {
            vec2 arc_center = vec2(p_size.x - p_radius, p_radius);
            color = calc_bounds(arc_center);
        }
        else if (p_local.y > p_size.y - p_radius)
        {
            vec2 arc_center = p_size - vec2(p_radius);
            color = calc_bounds(arc_center);
        }
        else
        {
            color = p_color;
        }
    }
    else 
    {
        color = p_color;
    }
}
